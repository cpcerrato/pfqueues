#!/bin/bash

# pfqueues: postsuper wrapper that provide some high level functions
# like search pattern in queues, delete queues, list queues, view 
# queue, etc

# Copyright (C) 2014 Carlos Perez Cerrato <cperezcerrato@gmail.com> 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Define paths to binariess and queue directory:

POSTCAT=/usr/sbin/postcat
POSTSUPER=/usr/sbin/postsuper
SPOOLDIR=/var/spool/postfix


function usage() {
    cat << EOF
${0##*/} [-h] [-l] [-c] [-v QUEUEID] [-p PATTERN] [-d]
    -h        Display this message.
    -l        List summary from all queues.
    -c        Count all messages group by subject.
    -p        Specify the pattern to search for.
    -d        Actually remove files not yank them, no -p will delete all the messages!
EOF
}

function load_deferred() {
    find ${SPOOLDIR}/deferred -type f
}

function load_active() {
    find ${SPOOLDIR}/active -type f
}

function load_incoming() {
    find ${SPOOLDIR}/incoming -type f
}

function load_inbound() {
    find ${SPOOLDIR}/maildrop -type f
}

function load_hold() {
    find ${SPOOLDIR}/hold -type f
}

function load_corrupt() {
    find ${SPOOLDIR}/corrupt -type f
}

function read_queue() {
    $POSTCAT $1
}

function get_queueid() {
    basename "$1"
}

function get_queue_file() {
    find ${SPOOLDIR} -type f -not -path "*defer/*" -name $1
}

function get_subject() {
    $POSTCAT -h $1|grep "^Subject"|head -n1
}

function get_all_subjects()
{
    for load_queues in $(load_deferred) $(load_inbound) $(load_hold) $(load_corrupt) $(load_active) $(load_incoming)
    do
        for mail in $load_queues
        do
            test -f $mail && get_subject $mail
        done
    done
}

function count() {
    get_all_subjects |sort|uniq -c|sort -n
}

function show_header_envelop_queue() {
    QUEUEID=$(get_queueid $1)
    if [ -f "$1" ];then
        echo -e "\n---------\n\e[01;32mQUEUEID:\e[00m \e[01;33m${QUEUEID}\e[00m"
        $POSTCAT -eh $1|grep -e "^sender:\|^Subject:\|^From:\|^To:\|^Date:"| \
            grep --color -e "^sender:\|^Subject:\|^From:\|^To:\|^Date:"
    fi
}

function search_pattern_queue() {
    local PATTERN="$1"
    local FOUND=0
    for load_queues in $(load_deferred) $(load_inbound) $(load_hold) $(load_corrupt) $(load_active) $(load_incoming)
    do
        for mail in $load_queues
        do
            if [ -f $mail ]
            then
                QUEUEID=$(get_queueid $mail)
                read_queue  $mail|grep -qme "${PATTERN}"
                if [ $? -eq 0 ]
                then
                    echo -e "\e[01;33m${QUEUEID}\e[00m:\e[01;32myes\e[00m"
                    FOUND=$(($FOUND+1))
                    if [ $FLAGDEL -eq 1 ]
                    then
                        $POSTSUPER -d ${QUEUEID}
                    fi
                else
                    echo -e "\e[01;33m${QUEUEID}\e[00m:\e[01;31mno\e[00m"
                fi
            fi
        done
    done
    echo -e "-----\n\e[01;32m$FOUND\e[00m file(s) matched!"
}

function list_summary() {
    for mail in $(load_deferred) $(load_inbound) $(load_hold) $(load_corrupt) \
          $(load_active) $(load_incoming)
    do
        test -f $mail && show_header_envelop_queue $mail
    done
}

function get_args() {
    while getopts  'chldp:v:' OPCION; do
        case "${OPCION}" in
            l)
                list_summary    
                ;;
            d)
                FLAGDEL=1
                ;;
            p)
                FLAGPAT=1
                PATTERN="${OPTARG}"
                ;;
            c)
                count
                exit 0
                ;;
            v)
                read_queue $(find_queueid_file ${OPTARG})
                exit 0
                ;;
           h|?|*)
                display_help
                ;;
        esac
    done
}
